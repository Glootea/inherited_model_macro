/* This code is generated by the macro.
import 'package:flutter/src/widgets/framework.dart' as prefix0;
import 'dart:ui' as prefix1;
import 'dart:core' as prefix2;
import 'package:flutter/src/foundation/key.dart' as prefix3;
import 'package:flutter/src/widgets/inherited_model.dart' as prefix4;

class LogoModelHolder extends prefix0.StatefulWidget{}
class _LogoModelHolderState extends prefix0.State<LogoModelHolder>{}
augment class LogoModelHolder {
	final prefix1.Color? backgroundColor;
	final prefix2.bool large;
	final prefix0.Widget child;

	const LogoModelHolder({
		required this.backgroundColor,
		required this.large,
		required this.child,
	});

	@prefix2.override
	prefix0.State<LogoModelHolder> createState() => _LogoModelHolderState();
}

augment class _LogoModelHolderState {
	 late prefix1.Color? backgroundColor;
	 late prefix2.bool large;

	@prefix2.override
	void initState() {
		super.initState();
		backgroundColor = widget.backgroundColor;
		large = widget.large;
	}

	void _update({
		prefix2.Object? backgroundColor = _logoModelStub,
		prefix2.Object? large = _logoModelStub,
	}) => 
		setState(() {
			this.backgroundColor = (backgroundColor != _logoModelStub)? backgroundColor as prefix1.Color?  : this.backgroundColor;
			this.large = (large != _logoModelStub)? large as prefix2.bool  : this.large;
		});

	@prefix2.override
	prefix0.Widget build(prefix0.BuildContext context) =>
		LogoModel(
			backgroundColor: backgroundColor,
			large: large,
			updateState: _update,
			child: widget.child,
		);
}

augment class LogoModel{
	const LogoModel({
		required this.backgroundColor,
		required this.large,
		required this.updateState,
		required prefix0.Widget
		child,prefix3.Key? key,
	}) : super(child: child, key: key);

	///Use this method to update state directly on instance
	final void Function({
		prefix1.Color? backgroundColor,
		prefix2.bool? large,
	}) updateState;

	@prefix2.override
	prefix2.bool updateShouldNotify(LogoModel oldWidget) =>
		backgroundColor != oldWidget.backgroundColor ||
		large != oldWidget.large;

	@prefix2.override
	prefix2.bool updateShouldNotifyDependent(
		LogoModel oldWidget,
		prefix2.Set<prefix2.String> dependencies) {
		if(backgroundColor != oldWidget.backgroundColor && dependencies.contains("backgroundColor"))  return true;
		if(large != oldWidget.large && dependencies.contains("large"))  return true;
		return false;
	}

	///Use this method to find instance of class and update its state
	static void update(
		prefix0.BuildContext context, {
		prefix1.Color? backgroundColor,
		prefix2.bool? large,
	}) {
		final model = getInstance(context);
		model.updateState(
			backgroundColor: backgroundColor,
			large: large,
		);
	}

	///Makes the widget listen to changes on `backgroundColor` field
	static prefix1.Color? watchBackgroundColor(prefix0.BuildContext context) =>
		prefix4.InheritedModel.inheritFrom<LogoModel>(
			context,
			aspect: 'backgroundColor',
		)!.backgroundColor;

	///Makes the widget listen to changes on `large` field
	static prefix2.bool watchLarge(prefix0.BuildContext context) =>
		prefix4.InheritedModel.inheritFrom<LogoModel>(
			context,
			aspect: 'large',
		)!.large;

	///Returns value of `backgroundColor` field without listening to it
	static prefix1.Color? readBackgroundColor(prefix0.BuildContext context) =>
		LogoModel.getInstance(context).backgroundColor;

	///Returns value of `large` field without listening to it
	static prefix2.bool readLarge(prefix0.BuildContext context) =>
		LogoModel.getInstance(context).large;

	static LogoModel getInstance(prefix0.BuildContext context) =>
		context.getInheritedWidgetOfExactType<LogoModel>()!;
}

const _logoModelStub = prefix2.Object();
*/
